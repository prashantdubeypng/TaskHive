<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TaskHive - Home</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Arial, sans-serif;
        }

        body {
            background: #f0f2f5;
            min-height: 100vh;
        }

        /* Navbar */
        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: white;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .nav-brand {
            font-size: 1.5rem;
            font-weight: 600;
            color: #6c5ce7;
        }

        .nav-items {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .nav-button {
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            background: #f0f2f5;
            border: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
            text-decoration: none;
            color: #333;
        }

        .nav-button:hover {
            background: #6c5ce7;
            color: white;
        }

        .user-menu {
            position: relative;
        }

        .user-dropdown {
            position: absolute;
            right: 0;
            top: 100%;
            background: white;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            padding: 0.5rem;
            min-width: 180px;
            display: none;
        }

        .user-dropdown.active {
            display: block;
        }

        .dropdown-item {
            padding: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            text-decoration: none;
            color: #333;
            border-radius: 6px;
        }

        .dropdown-item:hover {
            background: #f8f9fa;
        }

        .container {
            margin-top: 90px;
            display: grid;
            grid-template-columns: 280px 1fr;
            gap: 2rem;
            padding: 2rem;
            max-width: 1400px;
            margin-left: auto;
            margin-right: auto;
        }

        /* Section Cards */
        .teams-section, .todo-section {
            background: white;
            padding: 1.5rem;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .team-list, .todo-list ul {
            list-style: none;
        }

        .todo-item, .team-list li {
            margin-bottom: 0.8rem;
        }

        .todo-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .btn {
            padding: 0.5rem 1rem;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-weight: 500;
            transition: background 0.3s ease;
        }

        .btn-primary {
            background: #6c5ce7;
            color: white;
        }

        .btn-primary:hover {
            background: #5b4bc4;
        }

        /* Floating Buttons */
        .floating-buttons {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            display: flex;
            gap: 1rem;
        }

        .fab {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: #6c5ce7;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            transition: transform 0.3s ease, background 0.3s ease;
            cursor: pointer;
        }

        .fab:hover {
            background: #5b4bc4;
            transform: scale(1.1);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            width: 90%;
            max-width: 400px;
        }

        /* Create Team Overlay */
        #team-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #team-container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.2);
            width: 350px;
            text-align: center;
        }

        #team-container input {
            width: 100%;
            padding: 8px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .submit-btn, .done-btn {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            margin-top: 10px;
            cursor: pointer;
        }

        .submit-btn {
            background-color: #28a745;
            color: white;
        }

        .done-btn {
            background-color: #dc3545;
            color: white;
        }

        .hidden {
            display: none !important;
        }
    </style>
</head>
<body>

<nav class="navbar">
    <div class="nav-brand">TaskHive</div>
    <div class="nav-items">
        <% if(user) { %>
            <a href="/logic/todopage/<%= user._id %>" class="nav-button">
                <i class="fas fa-plus"></i> Add Task
            </a>
            <button onclick="chatroom('<%= user._id %>')" class="nav-button">Chatroom</button>
            <button class="nav-button" id="navCreateTeam">
                <i class="fas fa-users"></i> Create Team
            </button>
            <a href="/logic/profile" class="nav-button">Profile</a>

            <div class="user-menu">
                <button class="nav-button" id="userMenuBtn" aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-user"></i> <%= user.name %> â–¼
                </button>
                <div class="user-dropdown" id="userDropdown">
                    <a href="/logic/logout" class="dropdown-item">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a>
                </div>
            </div>
        <% } else { %>
            <a href="/user" class="nav-button">Login</a>
            <a href="/user/res" class="nav-button">Register</a>
        <% } %>
    </div>
</nav>

<div class="container">
    <!-- Teams Section -->
    <section class="teams-section">
        <div class="section-header">
            <h2>Teams</h2>
        </div>
        <ul class="team-list" id="teamList">
            <% if (Teams.length > 0) { %>
                <% Teams.forEach(team => { %>
                    <li>
                        <a href="/team/<%= team._id %>"><%= team.name %></a>
                    </li>
                <% }) %>
            <% } else { %>
                <li>No teams found. Create one</li>
            <% } %>
        </ul>
    </section>

    <!-- Todo Section -->
    <section class="todo-section">
        <div class="section-header">
            <h2>Todo List</h2>
        </div>
        <div class="todo-list" id="todoList">
            <% if (TodoList.length > 0) { %>
                <ul>
                    <% TodoList.forEach(todo => { %>
                        <li class="todo-item">
                            <label for="<%= todo._id %>" onclick="fetchTodoDetails('<%= todo._id %>')">
                                <span><%= todo.title %></span>
                            </label>
                            <% if(todo.status === 'pending') { %>
                                <button class="btn btn-primary" onclick="taskstarted('<%= todo._id %>')">START</button>
                            <% } else if(todo.status === 'in progress') { %>
                                <button class="btn btn-primary" onclick="todoend('<%= todo._id %>')">END</button>
                            <% } else if(todo.status === 'completed') { %>
                                <span>DONE</span>
                                <button onclick="tododelete('<%= todo._id %>')" class="btn">Delete</button>
                            <% } %>
                        </li>
                    <% }) %>
                </ul>
            <% } else { %>
                <p>No To-Do items found.</p>
            <% } %>
        </div>
    </section>
</div>

<!-- Floating Buttons -->
<div class="floating-buttons">
    <button class="fab" id="addTaskBtn">
        <i class="fas fa-plus"></i>
    </button>
    <button class="fab" id="assignTaskBtn">
        <i class="fas fa-user-friends"></i>
    </button>
</div>

<!-- Modal for Adding Task -->
<div class="modal" id="modal">
    <div class="modal-content">
        <h3>Add New Task</h3>
        <form id="taskForm">
            <input type="text" placeholder="Task title" required>
            <textarea placeholder="Description" rows="3"></textarea>
            <button type="submit" class="btn btn-primary">Add Task</button>
        </form>
    </div>
</div>

<!-- Team Creation Form -->
<div id="team-overlay" class="hidden">
    <div id="team-container">
        <h2>Create Team</h2>
        <input type="text" id="teamName" placeholder="Enter Team Name">
        <button class="submit-btn" id="addTEAMForm">Create</button>
        <button id="closeTeamForm" class="done-btn">Close</button>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const createTeamBtn = document.getElementById("navCreateTeam");
        const teamOverlay = document.getElementById("team-overlay");
        const closeBtn = document.getElementById("closeTeamForm");
        const userMenuBtn = document.getElementById("userMenuBtn");
        const userDropdown = document.getElementById("userDropdown");
        const addTeamBtn = document.getElementById("addTEAMForm");

        // Open Create Team Form
        createTeamBtn.addEventListener("click", (e) => {
            e.preventDefault();
            teamOverlay.classList.remove("hidden");
        });

        // Close Create Team Form
        closeBtn.addEventListener("click", () => {
            teamOverlay.classList.add("hidden");
        });

        // Close when clicking outside
        teamOverlay.addEventListener("click", (event) => {
            if (event.target === teamOverlay) {
                teamOverlay.classList.add("hidden");
            }
        });

        // Toggle user dropdown
        userMenuBtn?.addEventListener("click", (e) => {
            e.stopPropagation();
            userDropdown.classList.toggle("active");
        });

        document.addEventListener("click", (e) => {
            if (!e.target.closest(".user-menu")) {
                userDropdown.classList.remove("active");
            }
        });

        // Create Team API
        addTeamBtn.addEventListener("click", async (event) => {
            event.preventDefault();
            const teamName = document.getElementById("teamName").value.trim();
            if (!teamName) {
                alert("Please enter a team name");
                return;
            }
            try {
                const response = await fetch("/logic/CreateTeam", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ teamName }),
                });
                const data = await response.json();
                if (data.ok) {
                    alert("Team created successfully");
                    window.location.href = "/logic/home";
                } else {
                    alert(data.error || "Failed to create team");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Failed to create team");
            }
        });
    });

    // Task Functions
    async function fetchTodoDetails(todoId) {
        try {
            const response = await fetch(`/todo/${todoId}`);
            const todo = await response.json();
            alert(`Title: ${todo.title}\nDescription: ${todo.description}\nStatus: ${todo.status}\nCreated At: ${new Date(todo.createdAt).toLocaleString()}`);
        } catch (error) {
            console.error("Error fetching task details:", error);
        }
    }

    async function taskstarted(todoId) {
        await updateTask(`/todo/todoupdate/${todoId}`);
    }

    async function todoend(todoId) {
        await updateTask(`/todo/todoend/${todoId}`);
    }

    async function tododelete(todoId) {
        await updateTask(`/todo/tododelete/${todoId}`, "DELETE");
    }

    async function updateTask(url, method = "PUT") {
        try {
            const response = await fetch(url, { method, headers: { "Content-Type": "application/json" } });
            const data = await response.json();
            if (data.ok) {
                window.location.reload();
            } else {
                alert("Operation failed");
            }
        } catch (error) {
            console.error("Error updating task:", error);
        }
    }
    async function chatroom() {
        try {
            window.location='/chatroom';
            console.log('Chatroom page rendered successfully');
        } catch (error) {
            console.error('Error loading chatroom:', error);
            alert('Failed to load the chatroom page.');
        }
    }

</script>
</body>
</html>
